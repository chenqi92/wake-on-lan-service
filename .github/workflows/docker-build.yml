name: Build and Release

on:
  push:
    branches: [ master, main ]
    paths: [ 'VERSION', 'app/**', 'Dockerfile', 'requirements.txt', 'entrypoint.sh' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  DOCKERHUB_REGISTRY: docker.io
  DOCKERHUB_IMAGE: kkape/wake-on-lan-service
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  # 检测版本变化
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_changed: ${{ steps.version.outputs.changed }}
      is_new_version: ${{ steps.check.outputs.is_new }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Read current version
      id: version
      run: |
        VERSION=$(cat VERSION)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

        # 检查版本是否在此次提交中发生变化
        if git diff HEAD~1 HEAD --name-only | grep -q "^VERSION$"; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Version file changed in this commit"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "Version file not changed"
        fi

    - name: Check if version tag exists
      id: check
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if git tag -l | grep -q "^v$VERSION$"; then
          echo "is_new=false" >> $GITHUB_OUTPUT
          echo "Tag v$VERSION already exists"
        else
          echo "is_new=true" >> $GITHUB_OUTPUT
          echo "Tag v$VERSION does not exist"
        fi

  # 构建和推送Docker镜像
  build-and-push:
    runs-on: ubuntu-latest
    needs: check-version
    permissions:
      contents: read
      packages: write
    outputs:
      dockerhub_digest: ${{ steps.dockerhub.outputs.digest }}
      ghcr_digest: ${{ steps.ghcr.outputs.digest }}
      dockerhub_tags: ${{ steps.dockerhub_meta.outputs.tags }}
      ghcr_tags: ${{ steps.ghcr_meta.outputs.tags }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKERHUB_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GHCR_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker Hub metadata
      id: dockerhub_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKERHUB_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.check-version.outputs.version }},enable={{is_default_branch}}

    - name: Extract GitHub Container Registry metadata
      id: ghcr_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.GHCR_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.check-version.outputs.version }},enable={{is_default_branch}}

    - name: Build and push to Docker Hub
      id: dockerhub
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.dockerhub_meta.outputs.tags }}
        labels: ${{ steps.dockerhub_meta.outputs.labels }}
        cache-from: type=gha,scope=dockerhub
        cache-to: type=gha,mode=max,scope=dockerhub

    - name: Build and push to GitHub Container Registry
      id: ghcr
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.ghcr_meta.outputs.tags }}
        labels: ${{ steps.ghcr_meta.outputs.labels }}
        cache-from: type=gha,scope=ghcr
        cache-to: type=gha,mode=max,scope=ghcr

  # 创建GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: [check-version, build-and-push]
    if: needs.check-version.outputs.version_changed == 'true' && needs.check-version.outputs.is_new_version == 'true' && github.ref == 'refs/heads/master'
    permissions:
      contents: write
    outputs:
      release_id: ${{ steps.release.outputs.id }}
      release_url: ${{ steps.release.outputs.html_url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${{ needs.check-version.outputs.version }}

        # 生成发布说明
        cat > release_notes.md << EOF
        # Wake-on-LAN Service v$VERSION

        ## 🚀 功能特性
        - **简单唤醒**: 仅需提供 MAC 地址即可唤醒设备
        - **高级唤醒**: 支持指定网络接口、广播地址、端口等参数
        - **🔐 登录认证**: 账号密码 + 验证码登录保护
        - **🛡️ 安全防护**: JWT令牌认证，会话管理
        - **🔧 容器稳定性**: 优化的Docker配置，自动重启和健康检查

        ## 📦 Docker镜像

        ### Docker Hub
        \`\`\`bash
        docker pull kkape/wake-on-lan-service:$VERSION
        docker pull kkape/wake-on-lan-service:latest
        \`\`\`

        ### GitHub Container Registry
        \`\`\`bash
        docker pull ghcr.io/${{ github.repository }}:$VERSION
        docker pull ghcr.io/${{ github.repository }}:latest
        \`\`\`

        ## 🏗️ 支持的架构
        - linux/amd64
        - linux/arm64

        ## 🚀 快速启动
        \`\`\`bash
        docker run -d \\
          --name wake-on-lan \\
          --network host \\
          --cap-add NET_ADMIN \\
          --cap-add NET_RAW \\
          -e WOL_USERNAME=your_username \\
          -e WOL_PASSWORD=your_password \\
          -e WOL_SESSION_SECRET=your_secret \\
          kkape/wake-on-lan-service:$VERSION
        \`\`\`

        ## 📋 更新日志
        请查看提交历史了解详细变更。

        ## 🔗 相关链接
        - [Docker Hub](https://hub.docker.com/r/kkape/wake-on-lan-service)
        - [GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs/container/wake-on-lan-service)
        - [文档](https://github.com/${{ github.repository }})
        EOF

    - name: Create Release
      id: release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.version }}
        name: Wake-on-LAN Service v${{ needs.check-version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: true

  # 更新Release信息，添加镜像信息
  update-release:
    runs-on: ubuntu-latest
    needs: [check-version, build-and-push, create-release]
    if: needs.create-release.outputs.release_id != ''
    permissions:
      contents: write

    steps:
    - name: Update release with image information
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ needs.check-version.outputs.version }}';
          const releaseId = '${{ needs.create-release.outputs.release_id }}';
          const dockerhubDigest = '${{ needs.build-and-push.outputs.dockerhub_digest }}';
          const ghcrDigest = '${{ needs.build-and-push.outputs.ghcr_digest }}';

          // 获取当前release信息
          const { data: release } = await github.rest.repos.getRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId
          });

          // 添加镜像摘要信息
          const imageInfo = `

          ## 📋 镜像摘要信息

          ### Docker Hub
          - **镜像**: \`kkape/wake-on-lan-service:${version}\`
          - **摘要**: \`${dockerhubDigest}\`

          ### GitHub Container Registry
          - **镜像**: \`ghcr.io/${{ github.repository }}:${version}\`
          - **摘要**: \`${ghcrDigest}\`

          ## ✅ 镜像验证
          \`\`\`bash
          # 验证Docker Hub镜像
          docker pull kkape/wake-on-lan-service:${version}@${dockerhubDigest}

          # 验证GitHub镜像
          docker pull ghcr.io/${{ github.repository }}:${version}@${ghcrDigest}
          \`\`\`
          `;

          // 更新release描述
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId,
            body: release.body + imageInfo
          });

          console.log('Release updated with image information');

  # 通知构建结果
  notify:
    runs-on: ubuntu-latest
    needs: [check-version, build-and-push, create-release]
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "## 🏗️ 构建摘要" >> $GITHUB_STEP_SUMMARY
        echo "- **版本**: ${{ needs.check-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **版本变更**: ${{ needs.check-version.outputs.version_changed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **新版本**: ${{ needs.check-version.outputs.is_new_version }}" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
          echo "- **Docker构建**: ✅ 成功" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Docker构建**: ❌ 失败" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.create-release.result }}" == "success" ]]; then
          echo "- **Release创建**: ✅ 成功" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: ${{ needs.create-release.outputs.release_url }}" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.create-release.result }}" == "skipped" ]]; then
          echo "- **Release创建**: ⏭️ 跳过" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Release创建**: ❌ 失败" >> $GITHUB_STEP_SUMMARY
        fi
